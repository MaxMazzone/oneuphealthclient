{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","result","setResult","skip","setSkip","maximum","setMaximum","loading","setLoading","accessToken","setAccessToken","fetchData","useCallback","newSkip","a","axios","url","params","response","data","resources","total","window","alert","error_description","classes","makeStyles","center","display","flexDirection","alignItems","table","flex","maxWidth","tableInactive","opacity","buttonContainer","padding","button","margin","submitButton","marginLeft","inactiveSubmit","useStyles","className","length","required","type","onChange","e","target","value","name","disabled","onClick","TableContainer","component","Paper","Table","aria-label","TableBody","map","row","cells","key","push","TableCell","uuidv4","align","TableRow","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.60a077c2.chunk.js","sourcesContent":["import  React, { useState, useCallback }from 'react';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport './App.css';\n\nfunction App() {\n  const [result, setResult] = useState([]);\n  const [skip, setSkip] = useState(0);\n  const [maximum, setMaximum] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const [accessToken, setAccessToken] = useState('');\n\n\n  const fetchData = useCallback(async (newSkip) => {\n    setLoading(true)\n    setSkip(newSkip)\n\n    let response;\n    try {\n      response = await axios({\n        url: `https://oneupapi.herokuapp.com/fhir/everything/${accessToken}`,\n        params:{ skip: newSkip }\n        }\n      );\n      setResult(response.data.resources)\n      setMaximum(response.data.total)\n      setLoading(false)\n    } catch (error) {\n      window.alert(`Server returned error: ${error.response.data.error_description}. AccessToken is not validated and must be exact match`)\n    }\n  }, [accessToken]);\n\n  const reset = () => {\n    setLoading(true)\n    setSkip(0)\n    setMaximum(true)\n    setAccessToken('')\n    setResult([])\n    setLoading(false)\n  }\n\n  const useStyles = makeStyles({\n    center: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n\n    },\n    table: {\n      flex: 1,\n      maxWidth: 800,\n    },\n    tableInactive: {\n      flex: 1,\n      maxWidth: 800,\n      opacity: '.3'\n    },\n    buttonContainer: {\n      padding: 20\n    },\n    button: {\n      padding: 20,\n      margin: 20\n    },\n    submitButton: {\n      marginLeft: 10\n    },\n    inactiveSubmit: {\n      display: 'none'\n    },\n    \n  });\n  const classes = useStyles();\n\n  return (\n    <div className=\"App\">\n      <div className={classes.center}>\n        <div className={result.length > 0 ? classes.inactiveSubmit : null}>\n          <h2>Welcome</h2>\n          <h4>Please enter a valid access code</h4>\n          <input required type=\"text\" onChange={(e)=> setAccessToken(e.target.value)} name='accessToken' value={accessToken}/>\n          <button className={classes.submitButton} disabled={accessToken === ''} onClick={()=> fetchData(0)}> Submit </button>\n        </div>\n        {((result.length !== 0) && accessToken !== '') &&\n        <div>\n          <h3>Record {skip} - {skip + 10 < maximum ? skip + 10 : maximum} of {maximum}</h3>\n          <div className={classes.buttonContainer}>\n            <button className={classes.button} disabled={loading||skip < 10} type=\"button\" onClick={() => fetchData(skip - 10)}>\n              - 10\n            </button>\n            <button className={classes.button} disabled={loading||skip > maximum -10} type=\"button\" onClick={() => fetchData(skip + 10)}>\n              + 10\n            </button>\n            <button className={classes.button} disabled={loading} type=\"button\" onClick={() => reset()}>\n              reset\n            </button>\n          </div>\n          <TableContainer component={Paper}>\n            <Table className={!loading ? classes.table: classes.tableInactive} aria-label=\"simple table\">\n              <TableBody>\n                {result.map((row) => {\n                  let cells = []\n                  for(var key in row){\n                    cells.push(<TableCell key={uuidv4()} align=\"right\">{`${key}: ${row[key]}`}</TableCell>)\n                  }\n                  return <TableRow key={uuidv4()}>{cells}</TableRow>\n                })}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </div>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}